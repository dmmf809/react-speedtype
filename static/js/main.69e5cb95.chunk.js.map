{"version":3,"sources":["App.js","useLogic.js","index.js"],"names":["App","startingTime","useState","text","setText","time","setTime","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","handleChange","e","value","target","countWords","str","trim","split","filter","word","length","startGame","current","disabled","focus","endGame","useEffect","setTimeout","oldTime","useLogic","className","onChange","ref","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAuCeA,MApCf,WAAgB,IAAD,ECDS,WAAwB,IAAvBC,EAAsB,uDAAP,GAAO,EAErBC,mBAAS,IAFY,mBAEtCC,EAFsC,KAEhCC,EAFgC,OAGrBF,mBAASD,GAHY,mBAGtCI,EAHsC,KAGhCC,EAHgC,OAIHJ,oBAAS,GAJN,mBAItCK,EAJsC,KAIvBC,EAJuB,OAKXN,mBAAS,GALE,mBAKtCO,EALsC,KAK3BC,EAL2B,KAMvCC,EAAaC,iBAAO,MAEpBC,EAAe,SAACC,GAAO,IACnBC,EAAUD,EAAEE,OAAZD,MACRX,EAAQW,IAGJE,EAAa,SAACC,GAElB,OADcA,EAAIC,OAAOC,MAAM,KAClBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,QAGrCC,EAAY,WAChBhB,GAAiB,GACjBF,EAAQL,GACRG,EAAQ,IACRM,EAAa,GACbC,EAAWc,QAAQC,UAAW,EAC9Bf,EAAWc,QAAQE,SAGfC,EAAU,WACdpB,GAAiB,GACjBE,EAAaO,EAAWd,KAa1B,OAVA0B,qBAAU,WACLtB,GAAiBF,EAAO,EACzByB,YAAW,WACTxB,GAAQ,SAAAyB,GAAO,OAAIA,EAAU,OAC1B,KACY,IAAT1B,GACRuB,MAED,CAACvB,EAAME,IAEH,CACLM,eACAW,YACAf,YACAN,OACAQ,aACAJ,gBACAF,QDzCc2B,CAAS,IANjBnB,EADK,EACLA,aACDW,EAFM,EAENA,UACAf,EAHM,EAGNA,UACAN,EAJM,EAINA,KACAQ,EALM,EAKNA,WACAJ,EANM,EAMNA,cACAF,EAPM,EAONA,KAEP,OACE,sBAAK4B,UAAU,MAAf,UACE,wDAGA,0BACElB,MAAQZ,EACR+B,SAAWrB,EACXa,UAAYnB,EACZ4B,IAAOxB,IAET,kDACmBN,EADnB,OAGA,wBACE+B,QAAUZ,EACVE,SAAWnB,EAFb,mBAMA,oDACqBE,SE7B3B4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.69e5cb95.chunk.js","sourcesContent":["import { useLogic } from './useLogic'\nimport './App.css';\n\nfunction App() {\n  const { handleChange, \n         startGame, \n         wordCount, \n         text, \n         textBoxRef, \n         isTimeRunning,\n         time } = useLogic(20)\n\n  return (\n    <div className=\"App\">\n      <h1>\n        How fast can you type?\n      </h1>\n      <textarea \n        value= {text}\n        onChange= {handleChange}\n        disabled= {!isTimeRunning}\n        ref = {textBoxRef}\n      />\n      <h4>\n        Time Remaining: {time}s\n      </h4>\n      <button \n        onClick= {startGame}\n        disabled= {isTimeRunning}\n      >\n        Start\n      </button>\n      <h1>\n        Total word count: {wordCount}\n      </h1>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect, useRef } from 'react'\r\n\r\nexport const useLogic = (startingTime = 20) => {\r\n\r\n  const [text, setText] = useState('')\r\n  const [time, setTime] = useState(startingTime)\r\n  const [isTimeRunning, setIsTimeRunning] = useState(false)\r\n  const [wordCount, setWordCount] = useState(0)\r\n  const textBoxRef = useRef(null)\r\n\r\n  const handleChange = (e) => {\r\n    const { value } = e.target\r\n    setText(value)\r\n  }\r\n\r\n  const countWords = (str) => {\r\n    const words = str.trim().split(\" \")\r\n    return words.filter(word => word !== \"\").length\r\n  }\r\n\r\n  const startGame = () => {\r\n    setIsTimeRunning(true)\r\n    setTime(startingTime)\r\n    setText('')\r\n    setWordCount(0)\r\n    textBoxRef.current.disabled = false\r\n    textBoxRef.current.focus()\r\n  }\r\n\r\n  const endGame = () => {\r\n    setIsTimeRunning(false)\r\n    setWordCount(countWords(text))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(isTimeRunning && time > 0) {\r\n      setTimeout(() => {\r\n        setTime(oldTime => oldTime - 1)\r\n        }, 1000)\r\n    } else if(time === 0) {\r\n      endGame()\r\n    }\r\n  }, [time, isTimeRunning])\r\n\r\n  return {\r\n    handleChange,\r\n    startGame, \r\n    wordCount, \r\n    text, \r\n    textBoxRef, \r\n    isTimeRunning,\r\n    time\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}